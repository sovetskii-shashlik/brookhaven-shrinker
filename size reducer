local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
local button = Instance.new("TextButton")
local UserInputService = game:GetService("UserInputService")

-- Настройки кнопки
button.Size = UDim2.new(0, 100, 0, 50) -- начальный размер кнопки
button.Position = UDim2.new(0, 0, 0.5, -25) -- позиция кнопки сбоку и по центру вертикально
button.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- зеленый цвет
button.BorderSizePixel = 2 -- размер окантовки
button.BorderColor3 = Color3.fromRGB(0, 0, 0) -- цвет окантовки
button.Text = "Status: Off"
button.Font = Enum.Font.SourceSans
button.TextSize = 24
button.Parent = screenGui

screenGui.Parent = player:WaitForChild("PlayerGui")

local isActive = false
local dragging = false
local dragStart
local startPos

local function toggleButton()
    isActive = not isActive -- переключаем состояние

    if isActive then
        button.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- красный цвет
        button.Text = "Status: On"

        local args = {
            [1] = "CharacterSizeDown",
            [2] = 10
        }
        game:GetService("ReplicatedStorage").RE:FindFirstChild("1Clothe1s"):FireServer(unpack(args))

        button.BorderSizePixel = 4 -- толще окантовка
    else
        button.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- зеленый цвет
        button.Text = "Status: Off"

        local args = {
            [1] = "CharacterSizeUp",
            [2] = 1
        }
        game:GetService("ReplicatedStorage").RE:FindFirstChild("1Clothe1s"):FireServer(unpack(args))

        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping) -- персонаж прыгает
        end

        button.Size = UDim2.new(0, 100, 0, 50)
        button.BorderSizePixel = 2 -- возвращаем толщину окантовки к исходной
    end
end

button.MouseButton1Click:Connect(toggleButton) -- обработчик нажатия на кнопку

local function onInputBegan(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        if not dragging then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
        end
    end
end

local function onInputEnded(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end

local function updateButtonPosition(input)
    if dragging then
        local screenHeight = workspace.CurrentCamera.ViewportSize.Y
        local screenWidth = workspace.CurrentCamera.ViewportSize.X
        local deltaX = input.Position.X - dragStart.X
        local deltaY = input.Position.Y - dragStart.Y

        -- Вычисляем новую позицию кнопки
        local newPosX = startPos.X.Offset + deltaX
        local newPosY = startPos.Y.Offset + deltaY

        -- Ограничиваем позицию кнопки по горизонтали
        newPosX = math.clamp(newPosX, 0, screenWidth - button.Size.X.Offset)

        -- Ограничиваем позицию кнопки по вертикали
        newPosY = math.clamp(newPosY, 0, screenHeight - button.Size.Y.Offset)

        -- Обновляем позицию кнопки
        button.Position = UDim2.new(0, newPosX, 0, newPosY)
    end
end

button.InputBegan:Connect(onInputBegan)
button.InputEnded:Connect(onInputEnded)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        if dragging then
            updateButtonPosition(input)
        end
    end
end)
